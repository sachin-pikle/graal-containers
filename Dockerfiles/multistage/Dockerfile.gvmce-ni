#
# This is a multistange Docker build where we use:
# 1) GraalVM Community 22 Native Image Java 17 as the base build image to 
#    build the app JAR and generate the app native executable
# 2) A Linux container image with glibc as the base runtime image to 
#    ship the app native executable.
#    Option 1: With frolvlad/alpine-glibc, the runtime image size is 84.1 MB
#    Option 2: With gcr.io/distroless/base, the runtime image size is 91.2 MB
#    Option 3: With debian:buster-slim, the runtime image size is 140 MB
#    Option 4: With oraclelinux:8-slim, the runtime image size is 181 MB
#

#
# First Stage - Build stage: Build the app JAR file and generate the app native executable
#
FROM ghcr.io/graalvm/native-image:ol8-java17-22 AS builder

# Install tar and gzip to extract the Maven binaries
RUN microdnf update \
 && microdnf install --nodocs \
    tar \
    gzip \
 && microdnf clean all \
 && rm -rf /var/cache/yum

# Install Maven
# Source: 
# 1) https://github.com/carlossg/docker-maven/blob/925e49a1d0986070208e3c06a11c41f8f2cada82/openjdk-17/Dockerfile
# 2) https://maven.apache.org/download.cgi
ARG USER_HOME_DIR="/root"
ARG SHA=89ab8ece99292476447ef6a6800d9842bbb60787b9b8a45c103aa61d2f205a971d8c3ddfb8b03e514455b4173602bd015e82958c0b3ddc1728a57126f773c743
ARG MAVEN_DOWNLOAD_URL=https://dlcdn.apache.org/maven/maven-3/3.8.5/binaries/apache-maven-3.8.5-bin.tar.gz

RUN mkdir -p /usr/share/maven /usr/share/maven/ref \
  && curl -fsSL -o /tmp/apache-maven.tar.gz ${MAVEN_DOWNLOAD_URL} \
  && echo "${SHA}  /tmp/apache-maven.tar.gz" | sha512sum -c - \
  && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \
  && rm -f /tmp/apache-maven.tar.gz \
  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn

ENV MAVEN_HOME /usr/share/maven
ENV MAVEN_CONFIG "$USER_HOME_DIR/.m2"

# Set the working directory to /home/app
WORKDIR /home/app

# Copy the source code and pom.xml in this directory
# COPY . /home/app # As we have a .dockerignore file, we can also use this command
COPY src src
COPY pom.xml pom.xml

# Run maven package in this directory to build the app JAR file and generate the app native executable
RUN mvn clean package -DskipTests -Pnative

#
# Final stage: Create a runtime image from any Linux container image with glibc
#
# Option 1: frolvlad/alpine-glibc
# FROM frolvlad/alpine-glibc AS runtime
# Option 2: gcr.io/distroless/base
FROM gcr.io/distroless/base AS runtime
# Option 3: debian:buster-slim
# FROM debian:buster-slim AS runtime
# Option 4: oraclelinux:8-slim
# FROM oraclelinux:8-slim AS runtime
# FROM container-registry.oracle.com/os/oraclelinux:8-slim AS runtime

ARG APP_FILE
EXPOSE 8080
WORKDIR /home/app

COPY --from=builder /home/app/target/${APP_FILE} app
ENTRYPOINT ["./app"]