#
# This is a multistage Docker build where we use:
# 1) GraalVM Enterprise 22 Native Image Java 17 Oracle Linux 8 as the base build image to 
#    build the app JAR and generate the app native executable
# 2) A Linux container image with glibc as the base runtime image to 
#    ship the app native executable.
#    Option 1: With frolvlad/alpine-glibc, the runtime image size is 84.1 MB
#    Option 2: With gcr.io/distroless/base, the runtime image size is 91.2 MB
#    Option 3: With debian:buster-slim, the runtime image size is 140 MB
#    Option 4: With oraclelinux:8-slim, the runtime image size is 181 MB
#

#
# First Stage - Build stage: Build the app JAR file and generate the app native executable
#
FROM container-registry.oracle.com/graalvm/native-image-ee:ol8-java17-22 AS builder

# Install tar and gzip to extract the Maven binaries
RUN microdnf update \
 && microdnf install --nodocs \
    tar \
    gzip \
 && microdnf clean all \
 && rm -rf /var/cache/yum

# Install Maven
# Reference: 
# 1) Dockerfile: https://github.com/carlossg/docker-maven/blob/master/openjdk-18-slim/Dockerfile
# 2) Latest version: https://maven.apache.org/download.cgi
ARG MAVEN_VERSION=3.8.6
ARG USER_HOME_DIR="/root"
ARG SHA=f790857f3b1f90ae8d16281f902c689e4f136ebe584aba45e4b1fa66c80cba826d3e0e52fdd04ed44b4c66f6d3fe3584a057c26dfcac544a60b301e6d0f91c26
ARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries

RUN mkdir -p /usr/share/maven /usr/share/maven/ref \
  && curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz \
  && echo "${SHA}  /tmp/apache-maven.tar.gz" | sha512sum -c - \
  && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \
  && rm -f /tmp/apache-maven.tar.gz \
  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn

ENV MAVEN_HOME /usr/share/maven
ENV MAVEN_CONFIG "$USER_HOME_DIR/.m2"

# Set the working directory to /home/app
WORKDIR /home/app

# Copy the source code and pom.xml in this directory
# COPY . /home/app # As we have a .dockerignore file, we can also use this command
COPY src src
COPY pom.xml pom.xml

# Run maven package in this directory to build the app JAR file and generate the app native executable
RUN mvn clean package -DskipTests -Pnative

#
# Final stage: Create a runtime image from any Linux container image with glibc
#
# Option 1: frolvlad/alpine-glibc
# FROM frolvlad/alpine-glibc AS runtime
# Option 2: gcr.io/distroless/base
FROM gcr.io/distroless/base AS runtime
# Option 3: debian:buster-slim
# FROM debian:buster-slim AS runtime
# Option 4: oraclelinux:8-slim
# FROM oraclelinux:8-slim AS runtime
# FROM container-registry.oracle.com/os/oraclelinux:8-slim AS runtime

ARG APP_FILE
EXPOSE 8080
WORKDIR /home/app

COPY --from=builder /home/app/target/${APP_FILE} app
ENTRYPOINT ["./app"]